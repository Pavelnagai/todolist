{"version":3,"sources":["components/Error404/Error404.module.css","api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/TodolistList/Todolist/Todolist.tsx","utils/error-utils.ts","state/auth/auth-reducer.ts","state/app/app-reducer.ts","state/tasks/tasks-reducer.ts","state/todolists/todolists-reducer.ts","state/store/store.tsx","components/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/login/Login.tsx","components/Error404/Error404.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","entityStatus","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","todolistId","delete","put","taskId","model","AuthApi","data","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","key","className","Completed","Checkbox","checked","status","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","map","Button","handleServerNetworkError","dispatch","message","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","type","isInitialized","setAppStatus","payload","removeTaskAC","setTaskAC","todolistID","updateTaskAC","updateTaskTC","domainModel","getState","a","state","tasksReducer","find","console","warn","apiModel","deadline","description","priority","startDate","resultCode","isAxiosError","removeTodolistAC","changeTodolistTitleAC","clearTodolist","rootReducer","combineReducers","todolistsReducer","action","tl","todolist","todolists","stateCopy","filteredTasks","todoListId","isDone","el","appReducer","authReducer","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","TodolistList","useDispatch","useEffect","res","forEach","items","removeTaskThunkCreator","item","addTaskThunkCreator","changeStatus","newTitle","changeTodolistFilterAC","updateTodolist","addTodolist","setTodolistTC","Grid","container","style","padding","spacing","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","password","email","rememberMe","validate","values","errors","test","onSubmit","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","Error404","App","position","edge","aria-label","Menu","fixed","path","element","top","textAlign","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6d398fd4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error404_error__qUIep\"};","import axios, {AxiosResponse} from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '2a3c113a-9f81-44c2-8055-fcb19926514f'\n    }\n})\n\nexport const todolistAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post <{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('/todo-lists/', {title})\n    },\n    removeTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put <{ title: string }, AxiosResponse<ResponseType>>(`/todo-lists/${todolistId}`, {title})\n    },\n    getTask(todolistId: string) {\n        return instance.get<GetTaskResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    setTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    removeTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>\n        (`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n\nexport const AuthApi = {\n    login(data: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\n    },\n    me() {\n        return instance.get<ResponseType<MeRequestType>>('/auth/me')\n    },\n    logout() {\n        return instance.delete<ResponseType>('/auth/login')\n    }\n}\n\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type UpdateTaskModelType = {\n    title?: string\n    description?: string\n    completed?: boolean\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport type MeRequestType = {\n    id: number,\n    email: string,\n    login: string\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\ntype GetTaskResponse = {\n    error: null\n    items: TaskType[]\n    totalCount: number\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\nimport {RequestStatusType} from \"../../state/app/app-reducer\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n                   disabled={props.entityStatus === 'loading'}\n        />\n        <IconButton color=\"primary\" onClick={addItem}\n                    disabled={props.entityStatus === 'loading'}\n        >\n            <AddBox/>\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField variant=\"outlined\"\n                     value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\ntype TaskTypeProps = {\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    task: TaskType\n    todolistId: string\n}\n\nexport const Task = (props: TaskTypeProps) => {\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\n    }\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\n    }, [props.changeTaskTitle, props.task.id, props.todolistId])\n    return <div key={props.task.id} className={TaskStatuses.Completed ? \"is-done\" : \"\"}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n}\n\n\n","import React, {useCallback} from 'react';\nimport {AddItemForm} from '../../AddItemForm/AddItemForm';\nimport {EditableSpan} from '../../EditableSpan/EditableSpan';\nimport {Button, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {Task} from \"../../Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {FilterValuesType} from \"../../../state/todolists/todolists-reducer\";\nimport {RequestStatusType} from \"../../../state/app/app-reducer\";\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    entityStatus: RequestStatusType\n}\n\nexport const Todolist = React.memo((props: PropsType) => {\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id);\n    }, [props.addTask, props.id])\n\n    const removeTodolist = useCallback(() => {\n        props.removeTodolist(props.id);\n    }, [props.removeTodolist, props.id])\n\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title);\n    }, [props.changeTodolistTitle, props.id])\n\n    const onAllClickHandler = useCallback(() =>\n        props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\n\n    const onActiveClickHandler = useCallback(() =>\n        props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\n\n    const onCompletedClickHandler = useCallback(() =>\n        props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\n\n    let tasksForTodolist = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task task={t} changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                                                removeTask={props.removeTask} todolistId={props.id}\n                                                key={t.id}/>\n                )\n            }\n        </div>\n        <div>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n","import {AppActionsType, setError} from \"../state/app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolist-api\";\n\nexport const handleServerNetworkError = (dispatch: Dispatch<AppActionsType>, message: string) => {\n    dispatch(setError(message))\n}\n\n\nexport const handleServerAppError = <T>(dispatch: Dispatch<AppActionsType>, data: ResponseType<T>) => {\n    if (data.messages.length) {\n        dispatch(setError(data.messages[0]))\n    } else {\n        dispatch(setError('Some error occurred'))\n    }\n    dispatch(setError('failed'))\n}\n\n","import {Dispatch} from 'redux'\nimport {AppActionsType, setAppStatus} from \"../app/app-reducer\";\nimport {AuthApi, LoginParamsType} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport axios from \"axios\";\nimport {clearTodolist, ClearTodolistType} from \"../todolists/todolists-reducer\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\nexport const loginTC = (data: LoginParamsType) => async (dispatch: Dispatch<ActionsType>) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await AuthApi.login(data)\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true))\n        } else {\n            handleServerAppError(dispatch, res.data)\n        }\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(dispatch, err.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\nexport const logoutTC = () => async (dispatch: Dispatch<ActionsType>) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await AuthApi.logout()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setAppStatus('succeeded'))\n            dispatch(clearTodolist())\n        } else {\n            handleServerAppError(dispatch, res.data)\n        }\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(dispatch, err.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppActionsType | ClearTodolistType\n","import {Dispatch} from \"redux\"\nimport {AuthApi} from \"../../api/todolist-api\";\nimport {setIsLoggedInAC} from \"../auth/auth-reducer\";\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\nimport axios from \"axios\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.payload.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.payload.error}\n        case \"SET-IS-INITIALIZED\":\n            return {...state, isInitialized: action.payload.isInitialized}\n        default:\n            return state\n    }\n}\n\nexport const setAppStatus = (status: RequestStatusType) => ({\n    type: 'APP/SET-STATUS',\n    payload: {\n        status\n    }\n} as const)\n\nexport const setError = (error: string | null) => ({\n    type: 'APP/SET-ERROR',\n    payload: {\n        error\n    }\n} as const)\n\nexport const setIsInitializedAC = (isInitialized: boolean) => ({\n    type: 'SET-IS-INITIALIZED',\n    payload: {\n        isInitialized\n    }\n} as const)\n\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\n    try {\n        const res = await AuthApi.me()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n        }\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(dispatch, err.message)\n        }\n    } finally {\n        dispatch(setIsInitializedAC(true))\n    }\n}\n\nexport type SetInitializedType = ReturnType<typeof setIsInitializedAC>\nexport type SetErrorType = ReturnType<typeof setError>\nexport  type SetAppStatusType = ReturnType<typeof setAppStatus>\nexport type AppActionsType = SetAppStatusType | SetErrorType | SetInitializedType","import {\n    AddTodolistActionType,\n    ChangeEntityStatusTodolistType,\n    ClearTodolistType,\n    RemoveTodolistActionType,\n    SetTodolistsActionType,\n    TodolistActionsType\n} from '../todolists/todolists-reducer';\nimport {Dispatch} from \"redux\";\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\nimport {AppRootStateType} from \"../store/store\";\nimport {setAppStatus} from \"../app/app-reducer\";\nimport axios from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\n\nconst initialState: TasksStateType = {}\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state};\n            const tasks = state[action.payload.todolistId];\n            const filteredTasks = tasks.filter(t => t.id !== action.payload.taskId)\n            stateCopy[action.payload.todolistId] = filteredTasks;\n            return stateCopy;\n        }\n        case \"ADD-TASK\": {\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]]\n            }\n        }\n        case 'CHANGE-TASK-STATUS': {\n            state[action.payload.todolistId] = state[action.payload.todolistId].map(t => t.id === action.payload.taskId\n                ? {...t, isDone: action.payload.status} : t)\n            return {...state}\n        }\n        case 'CHANGE-TASK-TITLE': {\n            state[action.payload.todolistId] = state[action.payload.todolistId].map(t => t.id === action.payload.taskId\n                ? {...t, title: action.payload.title} : t)\n            return {...state}\n        }\n        case 'ADD-TODOLIST': {\n            return {...state, [action.payload.todolist.id]: []};\n        }\n        case \"SET-TODOLISTS\": {\n            const stateCopy = {...state};\n            action.payload.todolists.find(el => {\n                stateCopy[el.id] = []\n            })\n            return stateCopy;\n        }\n        case 'REMOVE-TODOLIST': {\n            const stateCopy = {...state};\n            delete stateCopy[action.payload.todolistId]\n            return stateCopy;\n        }\n        case \"SET_TASK\": {\n            const stateCopy = {...state};\n            stateCopy[action.payload.todolistID] = action.payload.task\n            return stateCopy\n        }\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId]\n                    .map(t => t.id === action.payload.taskId ? {...t, ...action.payload.model} : t)\n            }\n        case \"CLEAR-TODOLIST\":\n            return {}\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\n    type: 'REMOVE-TASK',\n    payload: {\n        todolistId, taskId\n    }\n} as const)\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', payload: {task}} as const)\nexport const changeTaskStatusAC = (taskId: string, status: any, todolistId: string) => (\n    {\n        type: 'CHANGE-TASK-STATUS',\n        payload: {\n            status, todolistId, taskId\n        }\n    } as const)\nexport const setTaskAC = (todolistID: string, task: TaskType[]) => {\n    return {\n        type: 'SET_TASK',\n        payload: {\n            todolistID,\n            task,\n        }\n    } as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\n    type: 'CHANGE-TASK-TITLE',\n    payload: {\n        title, todolistId, taskId\n    }\n} as const)\n\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({\n        type: 'UPDATE-TASK',\n        payload: {\n            model, todolistId, taskId\n        }\n    } as const)\n\nexport const fetchTaskTC = (todolistID: string) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await todolistAPI.getTask(todolistID)\n        dispatch(setTaskAC(todolistID, res.data.items))\n        dispatch(setAppStatus('succeeded'))\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(dispatch, err.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\n\nexport const addTaskThunkCreator = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await todolistAPI.setTask(todolistId, title)\n        if (res.data.resultCode === 0) {\n            dispatch(addTaskAC(res.data.data.item))\n            dispatch(setAppStatus('succeeded'))\n        } else {\n            handleServerAppError(dispatch, res.data)\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            handleServerNetworkError(dispatch, e.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\nexport const removeTaskThunkCreator = (todolistId: string, taskId: string) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await todolistAPI.removeTask(todolistId, taskId)\n        if (res.data.resultCode === 0) {\n            dispatch(removeTaskAC(taskId, todolistId))\n            dispatch(setAppStatus('succeeded'))\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            handleServerNetworkError(dispatch, e.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    async (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasksReducer[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            console.warn('task not found in the state')\n            return\n        }\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n        try {\n            dispatch(setAppStatus('loading'))\n            const res = await todolistAPI.updateTask(todolistId, taskId, apiModel)\n            if (res.data.resultCode === 0) {\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\n                dispatch(setAppStatus('succeeded'))\n            }\n        } catch (e) {\n            if (axios.isAxiosError(e)) {\n                handleServerNetworkError(dispatch, e.message)\n            }\n        } finally {\n            dispatch(dispatch(setAppStatus('idle')))\n        }\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof changeTaskStatusAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof setTaskAC>\n    | UpdateTaskType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | TodolistActionsType\n    | ChangeEntityStatusTodolistType\n    | ClearTodolistType\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nexport type UpdateTaskType = ReturnType<typeof updateTaskAC>","import {Dispatch} from 'redux';\nimport {AppActionsType, RequestStatusType, setAppStatus} from \"../app/app-reducer\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport axios from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {fetchTaskTC} from \"../tasks/tasks-reducer\";\n\n\nconst initialState: Array<TodolistDomainType> = []\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.payload.todolistId)\n        case 'ADD-TODOLIST':\n            return [{...action.payload.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n        case 'SET-TODOLISTS': {\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.payload.todolistId);\n            if (todolist) {\n                todolist.title = action.payload.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todolist = state.find(tl => tl.id === action.payload.todolistId);\n            if (todolist) {\n                todolist.filter = action.payload.filter;\n            }\n            return [...state];\n        }\n        case \"CHANGE-ENTITY-STATUS\":\n            return state.map(tl => tl.id === action.payload.id ? {\n                ...tl,\n                entityStatus: action.payload.entityStatus\n            } : tl)\n        case \"CLEAR-TODOLIST\":\n            return []\n        default:\n            return state\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string) => ({\n    type: 'REMOVE-TODOLIST', payload: {todolistId}\n} as const)\nexport const addTodolistAC = (todolist: TodolistType) => ({\n    type: 'ADD-TODOLIST',\n    payload: {\n        todolist\n    }\n} as const)\nexport const changeEntityStatusTodolistAC = (entityStatus: RequestStatusType, id: string) => ({\n    type: 'CHANGE-ENTITY-STATUS',\n    payload: {\n        entityStatus,\n        id\n    }\n} as const)\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\n    type: 'SET-TODOLISTS',\n    payload: {todolists}\n} as const)\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    payload: {\n        title,\n        todolistId\n    }\n} as const)\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType) => ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    payload: {\n        filter,\n        todolistId\n    }\n} as const)\n\nexport const clearTodolist = () => ({type: 'CLEAR-TODOLIST'} as const)\n\nexport const fetchTodolistsTC = () => async (dispatch: any) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await todolistAPI.getTodolists()\n        dispatch(setTodolistsAC(res.data))\n        if (res.data) {\n            res.data.forEach(el => {\n                dispatch(fetchTaskTC(el.id))\n            })\n        }\n    } catch\n        (e) {\n        if (axios.isAxiosError(e)) {\n            handleServerNetworkError(dispatch, e.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\n\nexport const setTodolistTC = (title: string) => async (dispatch: Dispatch<TodolistActionsType>) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await todolistAPI.createTodolist(title)\n        if (res.data.resultCode === 0) {\n            dispatch(addTodolistAC(res.data.data.item))\n        } else {\n            handleServerAppError(dispatch, res.data)\n        }\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(dispatch, err.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        dispatch(changeEntityStatusTodolistAC('loading', todolistId))\n        const res = await todolistAPI.removeTodolist(todolistId)\n        if (res.data.resultCode === 0) {\n            dispatch(removeTodolistAC(todolistId))\n        }\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(dispatch, err.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\nexport const updateTodolist = (todolistId: string, title: string) => async (dispatch: Dispatch) => {\n    try {\n        dispatch(setAppStatus('loading'))\n        const res = await todolistAPI.updateTodolist(todolistId, title)\n        if (res.data.resultCode === 0) {\n            dispatch(changeTodolistTitleAC(todolistId, title))\n        }\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(dispatch, err.message)\n        }\n    } finally {\n        dispatch(dispatch(setAppStatus('idle')))\n    }\n}\n\nexport type TodolistActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | SetTodolistsActionType\n    | AppActionsType\n    | ChangeEntityStatusTodolistType\n    | ClearTodolistType\n\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\nexport type ChangeEntityStatusTodolistType = ReturnType<typeof changeEntityStatusTodolistAC>\nexport type ClearTodolistType = ReturnType<typeof clearTodolist>\n\nexport type TodolistType = {\n    addedDate: string\n    id: string\n    order: number\n    title: string\n}\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType,\n    entityStatus: RequestStatusType\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {todolistsReducer} from \"../todolists/todolists-reducer\";\nimport {tasksReducer} from \"../tasks/tasks-reducer\";\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"../app/app-reducer\";\nimport {authReducer} from \"../auth/auth-reducer\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nconst rootReducer = combineReducers({\n    todolistsReducer,\n    tasksReducer,\n    appReducer,\n    authReducer,\n})\n\n\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\n\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\n\n//@ts-ignore\nwindow.store = store","import React, {useCallback, useEffect} from 'react';\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {AppRootStateType, useAppSelector} from \"../../state/store/store\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {\n    addTaskThunkCreator,\n    removeTaskThunkCreator,\n    TasksStateType,\n    updateTaskTC\n} from \"../../state/tasks/tasks-reducer\";\nimport {\n    changeTodolistFilterAC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    setTodolistTC,\n    TodolistDomainType,\n    updateTodolist\n} from \"../../state/todolists/todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\nconst TodolistList = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\n    const todolists = useAppSelector<TodolistDomainType[]>(state => state.todolistsReducer)\n    const tasks = useAppSelector<TasksStateType>(state => state.tasksReducer)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            dispatch(fetchTodolistsTC())\n        }\n    }, [dispatch])\n\n    const removeTask = useCallback((id: string, todolistId: string) => {\n        dispatch(removeTaskThunkCreator(todolistId, id))\n    }, [dispatch])\n\n    const addTask = useCallback((title: string, todolistId: string) => {\n        dispatch(addTaskThunkCreator(todolistId, title))\n    }, [dispatch])\n\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\n        dispatch(updateTaskTC(id, {status}, todolistId))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\n    }, [dispatch])\n\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n        dispatch(changeTodolistFilterAC(todolistId, value))\n    }, [dispatch])\n\n    const removeTodolist = useCallback((id: string) => {\n        dispatch(removeTodolistTC(id))\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\n        dispatch(updateTodolist(id, title))\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(setTodolistTC(title))\n    }, [dispatch])\n    if (!isLoggedIn) {\n        return <Navigate to={'login'}/>\n    }\n    return (\n        <>\n            <Grid container style={{padding: \"20px\"}}>\n                <AddItemForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {\n                    todolists.map(tl => {\n                        return <Grid item key={tl.id}>\n                            <Paper style={{padding: \"10px\"}}>\n                                <Todolist\n                                    key={tl.id}\n                                    id={tl.id}\n                                    title={tl.title}\n                                    entityStatus={tl.entityStatus}\n                                    tasks={tasks[tl.id]}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    filter={tl.filter}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                />\n                            </Paper>\n                        </Grid>\n                    })\n                }\n            </Grid>\n        </>\n    );\n};\n\nexport default TodolistList;","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useDispatch} from \"react-redux\";\nimport { useAppSelector } from '../../state/store/store';\nimport {setError} from \"../../state/app/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    const error = useAppSelector<string | null>(state => state.appReducer.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setError(null));\n    };\n\n    return (\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"../../state/auth/auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store/store\";\nimport {Navigate} from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            email: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 4) {\n                errors.password = 'Password length must be atleast 5 characters';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n    });\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email\n                            && formik.errors.email\n                            && <div style={{color: 'red'}}>{formik.errors.email}\n                            </div>}\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n\n                        />\n                        {formik.touched.password\n                            && formik.errors.password\n                            && <div style={{color: 'red'}}>{formik.errors.password}\n                            </div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox{...formik.getFieldProps('rememberMe')}\n                            />}/>\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n","import React from 'react';\nimport style from './Error404.module.css'\n\nconst Error404 = () => {\n    return (\n        <div className={style.error}>\n            <h1>404 Page not found</h1>\n        </div>\n    );\n};\n\nexport default Error404;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Menu} from '@material-ui/icons';\r\nimport TodolistList from \"../components/TodolistList/TodolistList\";\r\nimport {AppRootStateType, useAppSelector} from \"../state/store/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"../state/app/app-reducer\";\r\nimport AppBar from '@material-ui/core/AppBar/AppBar';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport IconButton from '@material-ui/core/IconButton/IconButton';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress/LinearProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../components/login/Login';\r\nimport Error404 from \"../components/Error404/Error404\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\nimport {logoutTC} from \"../state/auth/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const status = useAppSelector<RequestStatusType>(state => state.appReducer.status)\r\n    const isInitialized = useAppSelector<boolean>(state => state.appReducer.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistList/>}/>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'404'} element={<Error404/>}/>\r\n                    <Route path={'*'} element={<Navigate to='404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider\r\n        store={store}>\r\n        <HashRouter><App/></HashRouter>\r\n    </Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}