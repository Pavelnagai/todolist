{"version":3,"sources":["components/Error404/Error404.module.css","api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/TodolistList/Todolist/Todolist.tsx","state/auth/auth-reducer.ts","state/app/app-reducer.ts","utils/error-utils.ts","state/tasks/tasks-reducer.ts","state/todolists/todolists-reducer.ts","state/store/store.tsx","components/TodolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/login/Login.tsx","components/Error404/Error404.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","entityStatus","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","todolistId","delete","put","taskId","model","AuthApi","data","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","task","id","key","className","Completed","Checkbox","checked","status","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","map","Button","loginTC","createAsyncThunk","thunkApi","a","dispatch","setAppStatus","res","resultCode","handleServerAppError","rejectWithValue","handleServerNetworkError","message","logoutTC","param","clearTodolist","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","thunkAPI","isAxiosError","setIsInitializedAC","isInitialized","appReducer","messages","length","fetchTaskTC","todolistID","items","addTaskThunkCreator","item","removeTaskThunkCreator","updateTaskTC","getState","tasksReducer","find","apiModel","deadline","description","priority","startDate","domainModel","changeTaskStatusAC","isDone","addTodolistTC","todolist","fetchTodolistsTC","todolists","el","removeTodolistTC","todoListId","push","index","findIndex","splice","forEach","changeEntityStatusTodolistAC","updateTodolist","tl","changeTodolistFilterAC","todolistsReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","useAppSelector","useSelector","window","TodolistList","useDispatch","useEffect","changeStatus","addTodolist","Grid","container","style","padding","spacing","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","password","email","rememberMe","validate","values","errors","test","onSubmit","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","Error404","App","position","edge","aria-label","Menu","fixed","path","element","top","textAlign","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f2fe415f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error404_error__qUIep\"};","import axios, {AxiosResponse} from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '2a3c113a-9f81-44c2-8055-fcb19926514f'\n    }\n})\n\nexport const todolistAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post <{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('/todo-lists/', {title})\n    },\n    removeTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put <{ title: string }, AxiosResponse<ResponseType>>(`/todo-lists/${todolistId}`, {title})\n    },\n    getTask(todolistId: string) {\n        return instance.get<GetTaskResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    setTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`/todo-lists/${todolistId}/tasks`, {title})\n    },\n    removeTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>\n        (`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n\nexport const AuthApi = {\n    login(data: LoginParamsType) {\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\n    },\n    me() {\n        return instance.get<ResponseType<MeRequestType>>('/auth/me')\n    },\n    logout() {\n        return instance.delete<ResponseType>('/auth/login')\n    }\n}\n\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type UpdateTaskModelType = {\n    title?: string\n    description?: string\n    completed?: boolean\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\nexport type MeRequestType = {\n    id: number,\n    email: string,\n    login: string\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\n\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\ntype GetTaskResponse = {\n    error: null\n    items: TaskType[]\n    totalCount: number\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\nimport {RequestStatusType} from \"../../state/app/app-reducer\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n                   disabled={props.entityStatus === 'loading'}\n        />\n        <IconButton color=\"primary\" onClick={addItem}\n                    disabled={props.entityStatus === 'loading'}\n        >\n            <AddBox/>\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField variant=\"outlined\"\n                     value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\n\ntype TaskTypeProps = {\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    task: TaskType\n    todolistId: string\n}\n\nexport const Task = (props: TaskTypeProps) => {\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId);\n    }\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId);\n    }, [props.changeTaskTitle, props.task.id, props.todolistId])\n    return <div key={props.task.id} className={TaskStatuses.Completed ? \"is-done\" : \"\"}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n}\n\n\n","import React, {useCallback} from 'react';\nimport {AddItemForm} from '../../AddItemForm/AddItemForm';\nimport {EditableSpan} from '../../EditableSpan/EditableSpan';\nimport {Button, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {Task} from \"../../Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {FilterValuesType} from \"../../../state/todolists/todolists-reducer\";\nimport {RequestStatusType} from \"../../../state/app/app-reducer\";\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todolistId: string) => void\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    entityStatus: RequestStatusType\n}\n\nexport const Todolist = React.memo((props: PropsType) => {\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id);\n    }, [props.addTask, props.id])\n\n    const removeTodolist = useCallback(() => {\n        props.removeTodolist(props.id);\n    }, [props.removeTodolist, props.id])\n\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title);\n    }, [props.changeTodolistTitle, props.id])\n\n    const onAllClickHandler = useCallback(() =>\n        props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\n\n    const onActiveClickHandler = useCallback(() =>\n        props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\n\n    const onCompletedClickHandler = useCallback(() =>\n        props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\n\n    let tasksForTodolist = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task task={t} changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                                                removeTask={props.removeTask} todolistId={props.id}\n                                                key={t.id}/>\n                )\n            }\n        </div>\n        <div>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n","import {setAppStatus} from \"../app/app-reducer\";\nimport {AuthApi, LoginParamsType} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {clearTodolist} from \"../todolists/todolists-reducer\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport const loginTC = createAsyncThunk('auth/login', async (data: LoginParamsType, thunkApi) => {\n    try {\n        thunkApi.dispatch(setAppStatus({status: 'loading'}))\n        const res = await AuthApi.login(data)\n        if (res.data.resultCode === 0) {\n            thunkApi.dispatch(setAppStatus({status: 'succeeded'}))\n            return\n        } else {\n            handleServerAppError(thunkApi.dispatch, res.data)\n            return thunkApi.rejectWithValue(null)\n        }\n    } catch (err: any) {\n        handleServerNetworkError(thunkApi.dispatch, err.message)\n        return thunkApi.rejectWithValue(null)\n    }\n})\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkApi) => {\n    try {\n        thunkApi.dispatch(setAppStatus({status: 'loading'}))\n        const res = await AuthApi.logout()\n        if (res.data.resultCode === 0) {\n            thunkApi.dispatch(setAppStatus({status: 'succeeded'}))\n            thunkApi.dispatch(clearTodolist())\n            return\n        } else {\n            handleServerAppError(thunkApi.dispatch, res.data)\n        }\n    } catch (err: any) {\n        handleServerNetworkError(thunkApi.dispatch, err.message)\n    }\n})\n\n\nconst slice = createSlice({\n        name: 'auth',\n        initialState: {\n            isLoggedIn: false\n        },\n        reducers: {\n            setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n                state.isLoggedIn = action.payload.value\n            }\n        },\n        extraReducers: builder => {\n            builder.addCase(loginTC.fulfilled, (state, action) => {\n                state.isLoggedIn = true;\n            })\n            builder.addCase(logoutTC.fulfilled, (state, action) => {\n                state.isLoggedIn = false;\n            })\n        },\n    }\n)\n\nexport const authReducer = slice.reducer\n\nexport const {setIsLoggedInAC} = slice.actions\n\n","import {AuthApi} from \"../../api/todolist-api\";\nimport {setIsLoggedInAC} from \"../auth/auth-reducer\";\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\nimport axios from \"axios\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport const initializeAppTC = createAsyncThunk('app-initialized', async (param, thunkAPI) => {\n    try {\n        const res = await AuthApi.me()\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setIsLoggedInAC({value: true}));\n        }\n    } catch (err) {\n        if (axios.isAxiosError(err)) {\n            handleServerNetworkError(thunkAPI.dispatch, err.message)\n        }\n    } finally {\n        thunkAPI.dispatch(setIsInitializedAC({isInitialized: true}))\n    }\n})\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState: {\n        status: 'idle' as RequestStatusType,\n        error: null as string | null,\n        isInitialized: false\n    },\n    reducers: {\n        setAppStatus: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\n            state.status = action.payload.status\n        },\n        setError: (state, action: PayloadAction<{ error: null | string }>) => {\n            state.error = action.payload.error\n        },\n        setIsInitializedAC: (state, action: PayloadAction<{ isInitialized: boolean }>) => {\n            state.isInitialized = action.payload.isInitialized\n        },\n    }\n})\n\nexport const appReducer = slice.reducer\nexport const {setAppStatus, setError, setIsInitializedAC} = slice.actions\n\n\n\n","import {setAppStatus, setError} from \"../state/app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolist-api\";\n\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\n    dispatch(setError({error: message}))\n}\n\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\n    if (data.messages.length) {\n        dispatch(setError({error: data.messages[0]}))\n    } else {\n        dispatch(setError({error: 'Some error occurred'}))\n    }\n    dispatch(setAppStatus({status: 'failed'}))\n}\n\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from '../todolists/todolists-reducer';\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\nimport {RequestStatusType, setAppStatus} from \"../app/app-reducer\";\nimport axios from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AppRootStateType} from \"../store/store\";\n\n\nexport const fetchTaskTC = createAsyncThunk('task-fetch', async (param: { todolistID: string }, thunkAPI) => {\n    try {\n        const todolistID = param.todolistID\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        const res = await todolistAPI.getTask(todolistID);\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n        return {todolistID, task: res.data.items}\n    } catch (err: any) {\n        handleServerNetworkError(thunkAPI.dispatch, err.message)\n        return thunkAPI.rejectWithValue(null)\n    }\n})\nexport const addTaskThunkCreator = createAsyncThunk('tasks-addTask', async (param: { todolistId: string, title: string }, thunkAPI) => {\n    try {\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        const res = await todolistAPI.setTask(param.todolistId, param.title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n            return {task: res.data.data.item}\n        } else {\n            handleServerAppError(thunkAPI.dispatch, res.data)\n            return thunkAPI.rejectWithValue(null)\n        }\n    } catch (e: any) {\n        handleServerNetworkError(thunkAPI.dispatch, e.message)\n        return thunkAPI.rejectWithValue(null)\n    }\n})\nexport const removeTaskThunkCreator = createAsyncThunk('task-remove', async (param: { todolistId: string, taskId: string }, thunkAPI) => {\n    try {\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        const res = await todolistAPI.removeTask(param.todolistId, param.taskId)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n            return {taskId: param.taskId, todolistId: param.todolistId}\n        }\n        return thunkAPI.rejectWithValue(null)\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            handleServerNetworkError(thunkAPI.dispatch, e.message)\n            return thunkAPI.rejectWithValue(null)\n        }\n        return thunkAPI.rejectWithValue(null)\n    }\n})\nexport const updateTaskTC = createAsyncThunk('task-update', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\n    const state = thunkAPI.getState() as AppRootStateType\n    const task = state.tasksReducer[param.todolistId].find((t: { id: string; }) => t.id === param.taskId)\n    if (!task) {\n        return thunkAPI.rejectWithValue('task not found in the state')\n    }\n    const apiModel: UpdateTaskModelType = {\n        deadline: task.deadline,\n        description: task.description,\n        priority: task.priority,\n        startDate: task.startDate,\n        title: task.title,\n        status: task.status,\n        ...param.domainModel\n    }\n    try {\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        const res = await todolistAPI.updateTask(param.todolistId, param.taskId, apiModel)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n            return {\n                taskId: param.taskId,\n                model: param.domainModel,\n                todolistId: param.todolistId\n            }\n        }\n        return thunkAPI.rejectWithValue(null)\n    } catch (e: any) {\n        handleServerNetworkError(thunkAPI.dispatch, e.message)\n        return thunkAPI.rejectWithValue(null)\n    }\n})\n\nconst slice = createSlice({\n    name: \"task\",\n    initialState: {} as TasksStateType,\n    reducers: {\n        changeTaskStatusAC: (state, action: PayloadAction<{ taskId: string, status: RequestStatusType, todolistId: string }>) => {\n            state[action.payload.todolistId].map(t => t.id === action.payload.taskId\n                ? {...t, isDone: action.payload.status} : t)\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\n            state[action.payload.todolist.id] = []\n        })\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\n            action.payload.todolists.find((el: any) => {\n                state[el.id] = []\n            })\n        })\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\n            delete state[action.payload.todolistId]\n        })\n        builder.addCase(addTaskThunkCreator.fulfilled, (state, action) => {\n            state[action.payload.task.todoListId].push(action.payload.task)\n        })\n        builder.addCase(removeTaskThunkCreator.fulfilled, (state, action) => {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(el => el.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        })\n        builder.addCase(fetchTaskTC.fulfilled, (state, action) => {\n            state[action.payload.todolistID] = action.payload.task\n        })\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(el => el.id === action.payload.taskId)\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model}\n            }\n        })\n    }\n})\n\nexport const tasksReducer = slice.reducer\n\nexport const {changeTaskStatusAC} = slice.actions\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n","import {todolistAPI} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {fetchTaskTC} from \"../tasks/tasks-reducer\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {RequestStatusType, setAppStatus} from '../app/app-reducer';\n\n\nexport const fetchTodolistsTC = createAsyncThunk(\"todolist-fetchTodolists\", async (param, thunkAPI) => {\n    try {\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        const res = await todolistAPI.getTodolists()\n        if (res.data) {\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n            res.data.forEach(el => {\n                thunkAPI.dispatch(fetchTaskTC({todolistID: el.id}))\n            })\n        }\n        return {todolists: res.data}\n    } catch\n        (e: any) {\n        handleServerNetworkError(thunkAPI.dispatch, e.message)\n        return thunkAPI.rejectWithValue(null)\n    }\n})\n\nexport const addTodolistTC = createAsyncThunk(\"todolist-setTodolist\", async (param: { title: string }, thunkAPI) => {\n    try {\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        const res = await todolistAPI.createTodolist(param.title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n            return {todolist: res.data.data.item}\n        } else {\n            handleServerAppError(thunkAPI.dispatch, res.data)\n            return thunkAPI.rejectWithValue(null)\n        }\n    } catch (err: any) {\n        handleServerNetworkError(thunkAPI.dispatch, err.message)\n        return thunkAPI.rejectWithValue(null)\n    }\n})\n\nexport const removeTodolistTC = createAsyncThunk(\"todolist-removeTodo\", async (todolistId: string, thunkAPI) => {\n    try {\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        thunkAPI.dispatch(changeEntityStatusTodolistAC({entityStatus: 'loading', id: todolistId}))\n        const res = await todolistAPI.removeTodolist(todolistId)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n            return {todolistId: todolistId}\n        }\n        return thunkAPI.rejectWithValue(null)\n    } catch (err: any) {\n        handleServerNetworkError(thunkAPI.dispatch, err.message)\n        return thunkAPI.rejectWithValue(null)\n    }\n})\n\nexport const updateTodolist = createAsyncThunk('todolist-update', async (param: { todolistId: string, title: string }, thunkAPI) => {\n    try {\n        const todolistId = param.todolistId;\n        const title = param.title\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\n        const res = await todolistAPI.updateTodolist(todolistId, title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\n            return {todolistId, title}\n        }\n        return thunkAPI.rejectWithValue(null)\n    } catch (err: any) {\n        handleServerNetworkError(thunkAPI.dispatch, err.message)\n        return thunkAPI.rejectWithValue(null)\n    }\n})\n\nconst slice = createSlice({\n    name: \"todolist\",\n    initialState: [] as TodolistDomainType[],\n    reducers: {\n        changeEntityStatusTodolistAC(state, action: PayloadAction<{ entityStatus: RequestStatusType, id: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].entityStatus = action.payload.entityStatus\n\n        },\n        changeTodolistFilterAC(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\n            state[index].filter = action.payload.filter\n        },\n        clearTodolist(state, action: PayloadAction) {\n            state = []\n        },\n\n    },\n    extraReducers: builder => {\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n\n        })\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\n            state.push({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n        })\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n        })\n        builder.addCase(updateTodolist.fulfilled, (state, action) => {\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\n            state[index].title = action.payload.title\n        })\n    }\n})\nexport const todolistsReducer = slice.reducer\n\nexport const {\n    changeTodolistFilterAC,\n    changeEntityStatusTodolistAC,\n    clearTodolist\n} = slice.actions\n\n\nexport type TodolistType = {\n    addedDate: string\n    id: string\n    order: number\n    title: string\n}\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType,\n    entityStatus: RequestStatusType\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {todolistsReducer} from \"../todolists/todolists-reducer\";\nimport {tasksReducer} from \"../tasks/tasks-reducer\";\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"../app/app-reducer\";\nimport {authReducer} from \"../auth/auth-reducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nconst rootReducer = combineReducers({\n    todolistsReducer,\n    tasksReducer,\n    appReducer,\n    authReducer,\n})\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\n})\n\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\n\n//@ts-ignore\nwindow.store = store","import React, {useCallback, useEffect} from 'react';\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {AppRootStateType, useAppSelector} from \"../../state/store/store\";\nimport {TaskStatuses} from \"../../api/todolist-api\";\nimport {\n    addTaskThunkCreator,\n    removeTaskThunkCreator,\n    TasksStateType,\n    updateTaskTC\n} from \"../../state/tasks/tasks-reducer\";\nimport {\n    changeTodolistFilterAC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    addTodolistTC,\n    TodolistDomainType,\n    updateTodolist\n} from \"../../state/todolists/todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\n\nconst TodolistList = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\n    const todolists = useAppSelector<TodolistDomainType[]>(state => state.todolistsReducer)\n    const tasks = useAppSelector<TasksStateType>(state => state.tasksReducer)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            dispatch(fetchTodolistsTC())\n        }\n    }, [dispatch])\n\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\n        dispatch(removeTaskThunkCreator({todolistId, taskId}))\n    }, [dispatch])\n\n    const addTask = useCallback((title: string, todolistId: string) => {\n        dispatch(addTaskThunkCreator({todolistId, title}))\n    }, [dispatch])\n\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\n        dispatch(updateTaskTC({taskId, domainModel: {status}, todolistId}))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\n        dispatch(updateTaskTC({taskId, domainModel: {title}, todolistId}))\n    }, [dispatch])\n\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n        dispatch(changeTodolistFilterAC({todolistId, filter: value}))\n    }, [dispatch])\n\n    const removeTodolist = useCallback((todolistId: string) => {\n        dispatch(removeTodolistTC(todolistId))\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\n        dispatch(updateTodolist({todolistId, title}))\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistTC({title}))\n    }, [dispatch])\n    if (!isLoggedIn) {\n        return <Navigate to={'login'}/>\n    }\n    return (\n        <>\n            <Grid container style={{padding: \"20px\"}}>\n                <AddItemForm addItem={addTodolist}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {\n                    todolists.map(tl => {\n                        return <Grid item key={tl.id}>\n                            <Paper style={{padding: \"10px\"}}>\n                                <Todolist\n                                    key={tl.id}\n                                    id={tl.id}\n                                    title={tl.title}\n                                    entityStatus={tl.entityStatus}\n                                    tasks={tasks[tl.id]}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    filter={tl.filter}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                />\n                            </Paper>\n                        </Grid>\n                    })\n                }\n            </Grid>\n        </>\n    );\n};\n\nexport default TodolistList;","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useDispatch} from \"react-redux\";\nimport {useAppSelector} from '../../state/store/store';\nimport {setError} from \"../../state/app/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    const error = useAppSelector<string | null>(state => state.appReducer.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setError({error: null}));\n    };\n\n    return (\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"../../state/auth/auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store/store\";\nimport {Navigate} from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            email: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 4) {\n                errors.password = 'Password length must be atleast 5 characters';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n    });\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email\n                            && formik.errors.email\n                            && <div style={{color: 'red'}}>{formik.errors.email}\n                            </div>}\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n\n                        />\n                        {formik.touched.password\n                            && formik.errors.password\n                            && <div style={{color: 'red'}}>{formik.errors.password}\n                            </div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox{...formik.getFieldProps('rememberMe')}\n                            />}/>\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n","import React from 'react';\nimport style from './Error404.module.css'\n\nconst Error404 = () => {\n    return (\n        <div className={style.error}>\n            <h1>404 Page not found</h1>\n        </div>\n    );\n};\n\nexport default Error404;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {Menu} from '@material-ui/icons';\r\nimport TodolistList from \"../components/TodolistList/TodolistList\";\r\nimport {AppRootStateType, useAppSelector} from \"../state/store/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"../state/app/app-reducer\";\r\nimport AppBar from '@material-ui/core/AppBar/AppBar';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport IconButton from '@material-ui/core/IconButton/IconButton';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress/LinearProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../components/login/Login';\r\nimport Error404 from \"../components/Error404/Error404\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\nimport {logoutTC} from \"../state/auth/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const status = useAppSelector<RequestStatusType>(state => state.appReducer.status)\r\n    const isInitialized = useAppSelector<boolean>(state => state.appReducer.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistList/>}/>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'404'} element={<Error404/>}/>\r\n                    <Route path={'*'} element={<Navigate to='404'/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider\r\n        store={store}>\r\n        <HashRouter><App/></HashRouter>\r\n    </Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}